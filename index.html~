<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=1024, user-scalable=no">
    <style>
      html { height: 100% }
      body { height: 100%; margin: 0; padding: 0;}
      #map{ height: 100% }
      
      .upStuff{
          display:none;
      }
    </style>
    <link rel="stylesheet" href="js/leaflet.css" />
    <link rel="stylesheet" href="js/MarkerCluster.css" />
    <link rel="stylesheet" href="js/MarkerCluster.Default.css" />
    <link rel="stylesheet" href="bootstrap.css" />





<title>Pavement Markings</title></head><body>
<div id="map"></div>

<script src="js/leaflet.js"></script>
<script src="js/leaflet.markercluster.js"></script>
<script src="js/topojson.v1.min.js"></script>
<script src="js/communist.min.js"></script>

<script>
var worker = cw(function(url,cb){
	var that = this;
    var request = new XMLHttpRequest();
	request.open("GET", url);
	request.onreadystatechange = function() {
		var json;
		if (request.readyState === 4 && request.status === 200) {
			json = JSON.parse(request.responseText);
			console.log(json.features.length,' features');
			json.features.forEach(function(a){
				that.fire('geojson',a);
			});
			that.fire('done');
		}
	};
	request.send();
	}
);
var m = L.map("map",{zoomControl:false}).setView([42.37176642783951, -71.10875129699707],14);
var url = 'http://otile{s}.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.jpeg';

var attributionText = 'Tiles Courtesy of <a href="http://www.mapquest.com/">MapQuest</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors';

var mapquestSubdomains = '1234';

var optionsObject = {
    attribution : attributionText,
    subdomains : mapquestSubdomains
}

var mq=L.tileLayer(url, optionsObject).addTo(m);

//make the map
var options = {
	onEachFeature:function(feature, layer) {
		if (feature.properties) {
			layer.bindPopup(Object.keys(feature.properties).map(function(k){
				return k + ": " + feature.properties[k] ;
			}).join("<br />"),{maxHeight:200});
    	}
	}
};
var clusters= new L.MarkerClusterGroup();
clusters.addTo(m);
var markers=[];
worker.on('geojson',function(a){
	var marker = L.marker([a.geometry.coordinates[1],a.geometry.coordinates[0]]);
	markers.push(marker);
});
worker.on('done',function(){
	clusters.addLayers(markers);
});
worker.data(communist.makeUrl('DPW_StreetTrees.geojson'))
</script>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40454900-1', 'calvinmetcalf.github.io');
  ga('send', 'pageview');

</script>
</body>
</html>
